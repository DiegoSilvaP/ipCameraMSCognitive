//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace UWPSimpleMedStream
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[23];
            _typeNameTable[0] = "VLC.MediaElement";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[2] = "Boolean";
            _typeNameTable[3] = "VLC.MediaTransportControls";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "libVLCX.MediaPlayer";
            _typeNameTable[6] = "String";
            _typeNameTable[7] = "TimeSpan";
            _typeNameTable[8] = "System.ValueType";
            _typeNameTable[9] = "Int32";
            _typeNameTable[10] = "Windows.UI.Xaml.Media.MediaElementState";
            _typeNameTable[11] = "VLC.DeinterlaceMode";
            _typeNameTable[12] = "System.Enum";
            _typeNameTable[13] = "VLC.IMediaSource";
            _typeNameTable[14] = "Windows.UI.Xaml.Media.ImageSource";
            _typeNameTable[15] = "Windows.UI.Xaml.Media.Stretch";
            _typeNameTable[16] = "System.Collections.Generic.IDictionary`2<String, Object>";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.CommandBar";
            _typeNameTable[18] = "Windows.UI.Xaml.Style";
            _typeNameTable[19] = "System.Collections.Generic.IEnumerable`1<VLC.DeinterlaceMode>";
            _typeNameTable[20] = "UWPSimpleMedStream.MainPage";
            _typeNameTable[21] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[22] = "Windows.UI.Xaml.Controls.UserControl";

            _typeTable = new global::System.Type[23];
            _typeTable[0] = typeof(global::VLC.MediaElement);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[2] = typeof(global::System.Boolean);
            _typeTable[3] = typeof(global::VLC.MediaTransportControls);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::libVLCX.MediaPlayer);
            _typeTable[6] = typeof(global::System.String);
            _typeTable[7] = typeof(global::System.TimeSpan);
            _typeTable[8] = typeof(global::System.ValueType);
            _typeTable[9] = typeof(global::System.Int32);
            _typeTable[10] = typeof(global::Windows.UI.Xaml.Media.MediaElementState);
            _typeTable[11] = typeof(global::VLC.DeinterlaceMode);
            _typeTable[12] = typeof(global::System.Enum);
            _typeTable[13] = typeof(global::VLC.IMediaSource);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.Media.ImageSource);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Media.Stretch);
            _typeTable[16] = typeof(global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.CommandBar);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[19] = typeof(global::System.Collections.Generic.IEnumerable<global::VLC.DeinterlaceMode>);
            _typeTable[20] = typeof(global::UWPSimpleMedStream.MainPage);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MediaElement() { return new global::VLC.MediaElement(); }
        private object Activate_3_MediaTransportControls() { return new global::VLC.MediaTransportControls(); }
        private object Activate_20_MainPage() { return new global::UWPSimpleMedStream.MainPage(); }
        private void MapAdd_16_IDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  VLC.MediaElement
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_0_MediaElement;
                userType.AddMemberName("AreTransportControlsEnabled");
                userType.AddMemberName("HardwareAcceleration");
                userType.AddMemberName("AutoPlay");
                userType.AddMemberName("TransportControls");
                userType.AddMemberName("MediaPlayer");
                userType.AddMemberName("KeyStoreFilename");
                userType.AddMemberName("LogFilename");
                userType.AddMemberName("IsMuted");
                userType.AddMemberName("Position");
                userType.AddMemberName("Volume");
                userType.AddMemberName("CurrentState");
                userType.AddMemberName("Zoom");
                userType.AddMemberName("DeinterlaceMode");
                userType.AddMemberName("Source");
                userType.AddMemberName("MediaSource");
                userType.AddMemberName("PosterSource");
                userType.AddMemberName("Stretch");
                userType.AddMemberName("Options");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Boolean
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  VLC.MediaTransportControls
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_3_MediaTransportControls;
                userType.SetContentPropertyName("VLC.MediaTransportControls.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("CommandBar");
                userType.AddMemberName("AppBarButtonStyle");
                userType.AddMemberName("AvailableDeinterlaceModes");
                userType.AddMemberName("AutoHide");
                userType.AddMemberName("CursorAutoHide");
                userType.AddMemberName("IsDeinterlaceModeButtonVisible");
                userType.AddMemberName("IsDeinterlaceModeButtonEnabled");
                userType.AddMemberName("IsPlayPauseButtonVisible");
                userType.AddMemberName("IsPlayPauseEnabled");
                userType.AddMemberName("IsZoomButtonVisible");
                userType.AddMemberName("IsZoomEnabled");
                userType.AddMemberName("IsFullWindowButtonVisible");
                userType.AddMemberName("IsFullWindowEnabled");
                userType.AddMemberName("IsCompactOverlayButtonVisible");
                userType.AddMemberName("IsCompactOverlayEnabled");
                userType.AddMemberName("IsStopButtonVisible");
                userType.AddMemberName("IsStopEnabled");
                userType.AddMemberName("IsRepeatButtonVisible");
                userType.AddMemberName("IsRepeatEnabled");
                userType.AddMemberName("IsCompact");
                userType.AddMemberName("IsSeekBarVisible");
                userType.AddMemberName("IsSeekBarEnabled");
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  libVLCX.MediaPlayer
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  String
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  TimeSpan
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  System.ValueType
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 9:   //  Int32
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Windows.UI.Xaml.Media.MediaElementState
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  VLC.DeinterlaceMode
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Disabled", global::VLC.DeinterlaceMode.Disabled);
                userType.AddEnumValue("Discard", global::VLC.DeinterlaceMode.Discard);
                userType.AddEnumValue("Blend", global::VLC.DeinterlaceMode.Blend);
                userType.AddEnumValue("Mean", global::VLC.DeinterlaceMode.Mean);
                userType.AddEnumValue("Bob", global::VLC.DeinterlaceMode.Bob);
                userType.AddEnumValue("Linear", global::VLC.DeinterlaceMode.Linear);
                userType.AddEnumValue("X", global::VLC.DeinterlaceMode.X);
                userType.AddEnumValue("Yadif", global::VLC.DeinterlaceMode.Yadif);
                userType.AddEnumValue("Yadif2x", global::VLC.DeinterlaceMode.Yadif2x);
                userType.AddEnumValue("Phosphor", global::VLC.DeinterlaceMode.Phosphor);
                userType.AddEnumValue("IVTC", global::VLC.DeinterlaceMode.IVTC);
                xamlType = userType;
                break;

            case 12:   //  System.Enum
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 13:   //  VLC.IMediaSource
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Windows.UI.Xaml.Media.ImageSource
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Windows.UI.Xaml.Media.Stretch
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  System.Collections.Generic.IDictionary`2<String, Object>
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.DictionaryAdd = MapAdd_16_IDictionary;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.CommandBar
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.Style
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  System.Collections.Generic.IEnumerable`1<VLC.DeinterlaceMode>
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  UWPSimpleMedStream.MainPage
                userType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::VLC.VLCMediaElement_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_MediaElement_AreTransportControlsEnabled(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.AreTransportControlsEnabled;
        }
        private void set_0_MediaElement_AreTransportControlsEnabled(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.AreTransportControlsEnabled = (global::System.Boolean)Value;
        }
        private object get_1_MediaElement_HardwareAcceleration(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.HardwareAcceleration;
        }
        private void set_1_MediaElement_HardwareAcceleration(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.HardwareAcceleration = (global::System.Boolean)Value;
        }
        private object get_2_MediaElement_AutoPlay(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.AutoPlay;
        }
        private void set_2_MediaElement_AutoPlay(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.AutoPlay = (global::System.Boolean)Value;
        }
        private object get_3_MediaElement_TransportControls(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.TransportControls;
        }
        private void set_3_MediaElement_TransportControls(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.TransportControls = (global::VLC.MediaTransportControls)Value;
        }
        private object get_4_MediaTransportControls_Content(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.Content;
        }
        private void set_4_MediaTransportControls_Content(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_5_MediaElement_MediaPlayer(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.MediaPlayer;
        }
        private object get_6_MediaElement_KeyStoreFilename(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.KeyStoreFilename;
        }
        private void set_6_MediaElement_KeyStoreFilename(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.KeyStoreFilename = (global::System.String)Value;
        }
        private object get_7_MediaElement_LogFilename(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.LogFilename;
        }
        private void set_7_MediaElement_LogFilename(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.LogFilename = (global::System.String)Value;
        }
        private object get_8_MediaElement_IsMuted(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.IsMuted;
        }
        private void set_8_MediaElement_IsMuted(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.IsMuted = (global::System.Boolean)Value;
        }
        private object get_9_MediaElement_Position(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.Position;
        }
        private void set_9_MediaElement_Position(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.Position = (global::System.TimeSpan)Value;
        }
        private object get_10_MediaElement_Volume(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.Volume;
        }
        private void set_10_MediaElement_Volume(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.Volume = (global::System.Int32)Value;
        }
        private object get_11_MediaElement_CurrentState(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.CurrentState;
        }
        private object get_12_MediaElement_Zoom(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.Zoom;
        }
        private void set_12_MediaElement_Zoom(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.Zoom = (global::System.Boolean)Value;
        }
        private object get_13_MediaElement_DeinterlaceMode(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.DeinterlaceMode;
        }
        private void set_13_MediaElement_DeinterlaceMode(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.DeinterlaceMode = (global::VLC.DeinterlaceMode)Value;
        }
        private object get_14_MediaElement_Source(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.Source;
        }
        private void set_14_MediaElement_Source(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.Source = (global::System.String)Value;
        }
        private object get_15_MediaElement_MediaSource(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.MediaSource;
        }
        private void set_15_MediaElement_MediaSource(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.MediaSource = (global::VLC.IMediaSource)Value;
        }
        private object get_16_MediaElement_PosterSource(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.PosterSource;
        }
        private void set_16_MediaElement_PosterSource(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.PosterSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_17_MediaElement_Stretch(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.Stretch;
        }
        private void set_17_MediaElement_Stretch(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_18_MediaElement_Options(object instance)
        {
            var that = (global::VLC.MediaElement)instance;
            return that.Options;
        }
        private void set_18_MediaElement_Options(object instance, object Value)
        {
            var that = (global::VLC.MediaElement)instance;
            that.Options = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)Value;
        }
        private object get_19_MediaTransportControls_CommandBar(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.CommandBar;
        }
        private object get_20_MediaTransportControls_AppBarButtonStyle(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.AppBarButtonStyle;
        }
        private object get_21_MediaTransportControls_AvailableDeinterlaceModes(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.AvailableDeinterlaceModes;
        }
        private void set_21_MediaTransportControls_AvailableDeinterlaceModes(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.AvailableDeinterlaceModes = (global::System.Collections.Generic.IEnumerable<global::VLC.DeinterlaceMode>)Value;
        }
        private object get_22_MediaTransportControls_AutoHide(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.AutoHide;
        }
        private void set_22_MediaTransportControls_AutoHide(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.AutoHide = (global::System.Boolean)Value;
        }
        private object get_23_MediaTransportControls_CursorAutoHide(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.CursorAutoHide;
        }
        private void set_23_MediaTransportControls_CursorAutoHide(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.CursorAutoHide = (global::System.Boolean)Value;
        }
        private object get_24_MediaTransportControls_IsDeinterlaceModeButtonVisible(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsDeinterlaceModeButtonVisible;
        }
        private void set_24_MediaTransportControls_IsDeinterlaceModeButtonVisible(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsDeinterlaceModeButtonVisible = (global::System.Boolean)Value;
        }
        private object get_25_MediaTransportControls_IsDeinterlaceModeButtonEnabled(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsDeinterlaceModeButtonEnabled;
        }
        private void set_25_MediaTransportControls_IsDeinterlaceModeButtonEnabled(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsDeinterlaceModeButtonEnabled = (global::System.Boolean)Value;
        }
        private object get_26_MediaTransportControls_IsPlayPauseButtonVisible(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsPlayPauseButtonVisible;
        }
        private void set_26_MediaTransportControls_IsPlayPauseButtonVisible(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsPlayPauseButtonVisible = (global::System.Boolean)Value;
        }
        private object get_27_MediaTransportControls_IsPlayPauseEnabled(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsPlayPauseEnabled;
        }
        private void set_27_MediaTransportControls_IsPlayPauseEnabled(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsPlayPauseEnabled = (global::System.Boolean)Value;
        }
        private object get_28_MediaTransportControls_IsZoomButtonVisible(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsZoomButtonVisible;
        }
        private void set_28_MediaTransportControls_IsZoomButtonVisible(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsZoomButtonVisible = (global::System.Boolean)Value;
        }
        private object get_29_MediaTransportControls_IsZoomEnabled(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsZoomEnabled;
        }
        private void set_29_MediaTransportControls_IsZoomEnabled(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsZoomEnabled = (global::System.Boolean)Value;
        }
        private object get_30_MediaTransportControls_IsFullWindowButtonVisible(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsFullWindowButtonVisible;
        }
        private void set_30_MediaTransportControls_IsFullWindowButtonVisible(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsFullWindowButtonVisible = (global::System.Boolean)Value;
        }
        private object get_31_MediaTransportControls_IsFullWindowEnabled(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsFullWindowEnabled;
        }
        private void set_31_MediaTransportControls_IsFullWindowEnabled(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsFullWindowEnabled = (global::System.Boolean)Value;
        }
        private object get_32_MediaTransportControls_IsCompactOverlayButtonVisible(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsCompactOverlayButtonVisible;
        }
        private void set_32_MediaTransportControls_IsCompactOverlayButtonVisible(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsCompactOverlayButtonVisible = (global::System.Boolean)Value;
        }
        private object get_33_MediaTransportControls_IsCompactOverlayEnabled(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsCompactOverlayEnabled;
        }
        private void set_33_MediaTransportControls_IsCompactOverlayEnabled(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsCompactOverlayEnabled = (global::System.Boolean)Value;
        }
        private object get_34_MediaTransportControls_IsStopButtonVisible(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsStopButtonVisible;
        }
        private void set_34_MediaTransportControls_IsStopButtonVisible(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsStopButtonVisible = (global::System.Boolean)Value;
        }
        private object get_35_MediaTransportControls_IsStopEnabled(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsStopEnabled;
        }
        private void set_35_MediaTransportControls_IsStopEnabled(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsStopEnabled = (global::System.Boolean)Value;
        }
        private object get_36_MediaTransportControls_IsRepeatButtonVisible(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsRepeatButtonVisible;
        }
        private void set_36_MediaTransportControls_IsRepeatButtonVisible(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsRepeatButtonVisible = (global::System.Boolean)Value;
        }
        private object get_37_MediaTransportControls_IsRepeatEnabled(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsRepeatEnabled;
        }
        private void set_37_MediaTransportControls_IsRepeatEnabled(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsRepeatEnabled = (global::System.Boolean)Value;
        }
        private object get_38_MediaTransportControls_IsCompact(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsCompact;
        }
        private void set_38_MediaTransportControls_IsCompact(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsCompact = (global::System.Boolean)Value;
        }
        private object get_39_MediaTransportControls_IsSeekBarVisible(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsSeekBarVisible;
        }
        private void set_39_MediaTransportControls_IsSeekBarVisible(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsSeekBarVisible = (global::System.Boolean)Value;
        }
        private object get_40_MediaTransportControls_IsSeekBarEnabled(object instance)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            return that.IsSeekBarEnabled;
        }
        private void set_40_MediaTransportControls_IsSeekBarEnabled(object instance, object Value)
        {
            var that = (global::VLC.MediaTransportControls)instance;
            that.IsSeekBarEnabled = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember xamlMember = null;
            global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "VLC.MediaElement.AreTransportControlsEnabled":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "AreTransportControlsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_MediaElement_AreTransportControlsEnabled;
                xamlMember.Setter = set_0_MediaElement_AreTransportControlsEnabled;
                break;
            case "VLC.MediaElement.HardwareAcceleration":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "HardwareAcceleration", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_MediaElement_HardwareAcceleration;
                xamlMember.Setter = set_1_MediaElement_HardwareAcceleration;
                break;
            case "VLC.MediaElement.AutoPlay":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "AutoPlay", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_MediaElement_AutoPlay;
                xamlMember.Setter = set_2_MediaElement_AutoPlay;
                break;
            case "VLC.MediaElement.TransportControls":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "TransportControls", "VLC.MediaTransportControls");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_MediaElement_TransportControls;
                xamlMember.Setter = set_3_MediaElement_TransportControls;
                break;
            case "VLC.MediaTransportControls.Content":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_MediaTransportControls_Content;
                xamlMember.Setter = set_4_MediaTransportControls_Content;
                break;
            case "VLC.MediaElement.MediaPlayer":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "MediaPlayer", "libVLCX.MediaPlayer");
                xamlMember.Getter = get_5_MediaElement_MediaPlayer;
                xamlMember.SetIsReadOnly();
                break;
            case "VLC.MediaElement.KeyStoreFilename":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "KeyStoreFilename", "String");
                xamlMember.Getter = get_6_MediaElement_KeyStoreFilename;
                xamlMember.Setter = set_6_MediaElement_KeyStoreFilename;
                break;
            case "VLC.MediaElement.LogFilename":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "LogFilename", "String");
                xamlMember.Getter = get_7_MediaElement_LogFilename;
                xamlMember.Setter = set_7_MediaElement_LogFilename;
                break;
            case "VLC.MediaElement.IsMuted":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsMuted", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_MediaElement_IsMuted;
                xamlMember.Setter = set_8_MediaElement_IsMuted;
                break;
            case "VLC.MediaElement.Position":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "Position", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_MediaElement_Position;
                xamlMember.Setter = set_9_MediaElement_Position;
                break;
            case "VLC.MediaElement.Volume":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "Volume", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_MediaElement_Volume;
                xamlMember.Setter = set_10_MediaElement_Volume;
                break;
            case "VLC.MediaElement.CurrentState":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "CurrentState", "Windows.UI.Xaml.Media.MediaElementState");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_MediaElement_CurrentState;
                xamlMember.SetIsReadOnly();
                break;
            case "VLC.MediaElement.Zoom":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "Zoom", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_MediaElement_Zoom;
                xamlMember.Setter = set_12_MediaElement_Zoom;
                break;
            case "VLC.MediaElement.DeinterlaceMode":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "DeinterlaceMode", "VLC.DeinterlaceMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_MediaElement_DeinterlaceMode;
                xamlMember.Setter = set_13_MediaElement_DeinterlaceMode;
                break;
            case "VLC.MediaElement.Source":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "Source", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_MediaElement_Source;
                xamlMember.Setter = set_14_MediaElement_Source;
                break;
            case "VLC.MediaElement.MediaSource":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "MediaSource", "VLC.IMediaSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_MediaElement_MediaSource;
                xamlMember.Setter = set_15_MediaElement_MediaSource;
                break;
            case "VLC.MediaElement.PosterSource":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "PosterSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_MediaElement_PosterSource;
                xamlMember.Setter = set_16_MediaElement_PosterSource;
                break;
            case "VLC.MediaElement.Stretch":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_MediaElement_Stretch;
                xamlMember.Setter = set_17_MediaElement_Stretch;
                break;
            case "VLC.MediaElement.Options":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaElement");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "Options", "System.Collections.Generic.IDictionary`2<String, Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_MediaElement_Options;
                xamlMember.Setter = set_18_MediaElement_Options;
                break;
            case "VLC.MediaTransportControls.CommandBar":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "CommandBar", "Windows.UI.Xaml.Controls.CommandBar");
                xamlMember.Getter = get_19_MediaTransportControls_CommandBar;
                xamlMember.SetIsReadOnly();
                break;
            case "VLC.MediaTransportControls.AppBarButtonStyle":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "AppBarButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.Getter = get_20_MediaTransportControls_AppBarButtonStyle;
                xamlMember.SetIsReadOnly();
                break;
            case "VLC.MediaTransportControls.AvailableDeinterlaceModes":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "AvailableDeinterlaceModes", "System.Collections.Generic.IEnumerable`1<VLC.DeinterlaceMode>");
                xamlMember.Getter = get_21_MediaTransportControls_AvailableDeinterlaceModes;
                xamlMember.Setter = set_21_MediaTransportControls_AvailableDeinterlaceModes;
                break;
            case "VLC.MediaTransportControls.AutoHide":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "AutoHide", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_MediaTransportControls_AutoHide;
                xamlMember.Setter = set_22_MediaTransportControls_AutoHide;
                break;
            case "VLC.MediaTransportControls.CursorAutoHide":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "CursorAutoHide", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_MediaTransportControls_CursorAutoHide;
                xamlMember.Setter = set_23_MediaTransportControls_CursorAutoHide;
                break;
            case "VLC.MediaTransportControls.IsDeinterlaceModeButtonVisible":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsDeinterlaceModeButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_MediaTransportControls_IsDeinterlaceModeButtonVisible;
                xamlMember.Setter = set_24_MediaTransportControls_IsDeinterlaceModeButtonVisible;
                break;
            case "VLC.MediaTransportControls.IsDeinterlaceModeButtonEnabled":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsDeinterlaceModeButtonEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_MediaTransportControls_IsDeinterlaceModeButtonEnabled;
                xamlMember.Setter = set_25_MediaTransportControls_IsDeinterlaceModeButtonEnabled;
                break;
            case "VLC.MediaTransportControls.IsPlayPauseButtonVisible":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsPlayPauseButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_MediaTransportControls_IsPlayPauseButtonVisible;
                xamlMember.Setter = set_26_MediaTransportControls_IsPlayPauseButtonVisible;
                break;
            case "VLC.MediaTransportControls.IsPlayPauseEnabled":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsPlayPauseEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_MediaTransportControls_IsPlayPauseEnabled;
                xamlMember.Setter = set_27_MediaTransportControls_IsPlayPauseEnabled;
                break;
            case "VLC.MediaTransportControls.IsZoomButtonVisible":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsZoomButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_MediaTransportControls_IsZoomButtonVisible;
                xamlMember.Setter = set_28_MediaTransportControls_IsZoomButtonVisible;
                break;
            case "VLC.MediaTransportControls.IsZoomEnabled":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsZoomEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_MediaTransportControls_IsZoomEnabled;
                xamlMember.Setter = set_29_MediaTransportControls_IsZoomEnabled;
                break;
            case "VLC.MediaTransportControls.IsFullWindowButtonVisible":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsFullWindowButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_MediaTransportControls_IsFullWindowButtonVisible;
                xamlMember.Setter = set_30_MediaTransportControls_IsFullWindowButtonVisible;
                break;
            case "VLC.MediaTransportControls.IsFullWindowEnabled":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsFullWindowEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_MediaTransportControls_IsFullWindowEnabled;
                xamlMember.Setter = set_31_MediaTransportControls_IsFullWindowEnabled;
                break;
            case "VLC.MediaTransportControls.IsCompactOverlayButtonVisible":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsCompactOverlayButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_MediaTransportControls_IsCompactOverlayButtonVisible;
                xamlMember.Setter = set_32_MediaTransportControls_IsCompactOverlayButtonVisible;
                break;
            case "VLC.MediaTransportControls.IsCompactOverlayEnabled":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsCompactOverlayEnabled", "Boolean");
                xamlMember.Getter = get_33_MediaTransportControls_IsCompactOverlayEnabled;
                xamlMember.Setter = set_33_MediaTransportControls_IsCompactOverlayEnabled;
                break;
            case "VLC.MediaTransportControls.IsStopButtonVisible":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsStopButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_MediaTransportControls_IsStopButtonVisible;
                xamlMember.Setter = set_34_MediaTransportControls_IsStopButtonVisible;
                break;
            case "VLC.MediaTransportControls.IsStopEnabled":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsStopEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_MediaTransportControls_IsStopEnabled;
                xamlMember.Setter = set_35_MediaTransportControls_IsStopEnabled;
                break;
            case "VLC.MediaTransportControls.IsRepeatButtonVisible":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsRepeatButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_MediaTransportControls_IsRepeatButtonVisible;
                xamlMember.Setter = set_36_MediaTransportControls_IsRepeatButtonVisible;
                break;
            case "VLC.MediaTransportControls.IsRepeatEnabled":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsRepeatEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_MediaTransportControls_IsRepeatEnabled;
                xamlMember.Setter = set_37_MediaTransportControls_IsRepeatEnabled;
                break;
            case "VLC.MediaTransportControls.IsCompact":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsCompact", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_MediaTransportControls_IsCompact;
                xamlMember.Setter = set_38_MediaTransportControls_IsCompact;
                break;
            case "VLC.MediaTransportControls.IsSeekBarVisible":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsSeekBarVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_MediaTransportControls_IsSeekBarVisible;
                xamlMember.Setter = set_39_MediaTransportControls_IsSeekBarVisible;
                break;
            case "VLC.MediaTransportControls.IsSeekBarEnabled":
                userType = (global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlUserType)GetXamlTypeByName("VLC.MediaTransportControls");
                xamlMember = new global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlMember(this, "IsSeekBarEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_MediaTransportControls_IsSeekBarEnabled;
                xamlMember.Setter = set_40_MediaTransportControls_IsSeekBarEnabled;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlSystemBaseType
    {
        global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::UWPSimpleMedStream.UWPSimpleMedStream_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

